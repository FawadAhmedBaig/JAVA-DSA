class CircularLinkedList{
class Node{
int data;
Node next;

Node(int d){
data = d;
next = null;
}
}

Node head = null;
Node tail = null;
int size, i, mid = 0;

void add_To_Head(int val){
Node n = new Node(val);
if(head==null){
head = n ;
head.next = head;
tail = head;
}
else{
n.next = head;
head = n;
tail.next = head;
}
size++;
}

void add_To_Tail(int val){
Node n = new Node(val);
if(head == null){
head = n;
head.next = head;
tail = head;
}
else{
tail.next = n;
tail = n;
tail.next = head;
}
size++;
}


void add_To_Mid(int val){
i = 0;
Node n = new Node(val);
if(head==null){
head = n;
head.next = head;
tail = head;
}
else{
mid = size/2;
Node current = head;
Node prev = current;
while(current.next != head){
if(i==mid){
prev.next = n;
n.next = current;
break;
}
i++;
prev = current;
current = current.next;
}
}
size++;
}

void add_To_Loc(int index, int val){
i=0;
Node n = new Node(val);
if(head==null){
head = n;
n.next = head;
tail = head;
}
else{
Node current = head;
Node prev = current;
while(current.next != head){
if(i==index){
prev.next = n;
n.next = current;
break;
}

i++;
prev = current;
current = current.next;
}
if(i==index){
prev.next = n;
n.next = current;
}
}
size++;
}

void del_From_Head(){
if(head == null){
System.out.println("List is Empty!!!");
}
else{
head = head.next;
tail.next = head;
size--;
}
}

void del_From_Tail(){
if(head == null){
System.out.println("List is Empty!!!");
}
else{
Node current = head;
Node prev = current;
while(current.next!=head){
prev = current;
current = current.next;
}
prev.next = head;
tail = prev;
size--;
}
}

void del_From_Mid(){
i=0;
if(head==null){
System.out.println("List is Empty!!!");
}
else{
mid = size/2;
Node current = head;
Node prev = current;

while(current.next != head){
if(i==mid){
current = current.next;
prev.next = current;
size--;
break;
}
i++;
prev = current;
current = current.next;
}

}
}

void del_From_Loc(int index){
i=0;
if(head==null){
System.out.println("List is Empty!!!");
}
else{
Node current = head;
Node prev = current;
while(current.next != head){
if(index == 0){
head = head.next;
tail.next = head;
break;
}
if(i==index){
current = current.next;
prev.next = current;
}
i++;
prev = current;
current = current.next;
}
if(i==index){
current = current.next;
prev.next = current;
}
size--;
}
}

void search(int val){
i=0;
int loc = -1;
if(head == null){
System.out.println("List is Empty!!!");
}
else{
Node current = head;
while(current.next != head){
if(current.data == val){
loc = i;
break;
}
i++;
current = current.next;
}
if(current.data == val){
loc = i;
}
if(loc==-1){
System.out.println("Not Found!");
}
else{
System.out.println("Value Found at Node: " + loc);
}
}
}

void delByValue(int val){
i=0;
int loc = -1;
if(head == null){
System.out.println("List is Empty!!!");
}

else if(head.data==val){
if(head == tail){
head = null;
tail = null;
}
else{
head = head.next;
tail.next = head;
}}

else{
Node current = head;
Node prev = current;
while(current.next != head){
if(current.data == val){
current = current.next;
prev.next = current;
break;
}
i++;
prev = current;
current = current.next;
}
if(current.data == val){
prev.next = current.next;
}
if(loc==-1){
System.out.println("Value Does Not Exist!");
}

}
}

void display(){
Node current = head;
while(current.next!=head){
System.out.print(current.data + " ");
current = current.next;
}
System.out.println(current.data);
}

public static void main(String[] a){
CircularLinkedList cl = new CircularLinkedList();

cl.add_To_Head(11);
cl.display();
cl.add_To_Head(55);
cl.display();
cl.add_To_Tail(44);
cl.display();
cl.add_To_Tail(22);
cl.display();
cl.add_To_Mid(123);
cl.display();
cl.add_To_Loc(4,33);
cl.display();

cl.del_From_Head();
cl.display();
cl.del_From_Tail();
cl.display();
cl.add_To_Tail(43);
cl.display();
cl.del_From_Mid();
cl.display();

cl.del_From_Loc(0);
cl.display();

cl.search(123);
cl.display();
cl.delByValue(43);
cl.display();


}
}