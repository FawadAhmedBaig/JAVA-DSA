class BST {

    class Node {
        int key;
        Node left;
        Node right;

        public Node(int d) {
            key = d;
            left = null;
            right = null;
        }
    }

    Node root;

    BST() {
        root = null;
    }

    void insert(int key) {
        root = insert_Recursive(root, key);
    }

    Node insert_Recursive(Node root, int key) {
        if (root == null) {
            root = new Node(key);
            return root;
        }

        if (key < root.key) {
            root.left = insert_Recursive(root.left, key);
        } else if (key > root.key) {
            root.right = insert_Recursive(root.right, key);
        }

        return root;
    }

    boolean search(int key) {
        root = search_Recursive(root, key);
        return root != null;
    }

    Node search_Recursive(Node root, int key) {
        if (root == null || root.key == key)
            return root;

        if (root.key > key)
            return search_Recursive(root.left, key);
        else
            return search_Recursive(root.right, key);
    }

    void deleteKey(int key) {
        root = delete_Recursive(root, key);
    }

    Node delete_Recursive(Node root, int key) {
        if (root == null)
            return root;

        if (root.key > key)
            root.left = delete_Recursive(root.left, key);
        else if (root.key < key)
            root.right = delete_Recursive(root.right, key);
        else {
            if (root.left == null)
                return root.right;
            else if (root.right == null)
                return root.left;

            root.key = minValue(root.right);
            root.right = delete_Recursive(root.right, root.key);
        }
        return root;
    }

    int minValue(Node root) {
        int minval = root.key;

        while (root.left != null) {
            minval = root.left.key;
            root = root.left;
        }
        return minval;
    }

    void inorder() {
        inorder_Recursive(root);
        System.out.println();
    }

    void inorder_Recursive(Node root) {
        if (root != null) {
            inorder_Recursive(root.left);
            System.out.print(root.key + " ");
            inorder_Recursive(root.right);
        }
    }

    void searchValue(int val) {
        if (search(val))
            System.out.println("Value Found!");
        else
            System.out.println("Value Not Found!");
    }

    public static void main(String[] a) {
        BST bst = new BST();
        int[] arr = { 2, 3, 5, 6, 8, 10 };
        for (int i = 0; i < arr.length; i++) {
            bst.insert(arr[i]);
        }
        bst.inorder();
        bst.deleteKey(6);
        bst.inorder();
        bst.searchValue(9);
    }
}
