class DoublyLinkedList{
class Node{
int data;
Node next;
Node prev;

Node(int d){
data = d;
next = null;
prev = null;
}
}

Node head = null;
Node tail = null;

int mid,c,i = 0 ;
boolean found;
public static void main(String[] a){
DoublyLinkedList l = new DoublyLinkedList();
l.insertFirst(23);
l.insertLast(1);
l.display();
l.insertFirst(44);
l.insertFirst(66);
l.insertFirst(32);
l.insertFirst(12);
l.display();
l.insertMid(34);
l.display();
l.insertIn(3, 45);
l.display();
l.insertIn(5, 48);
l.display();
l.removeFirst();
l.display();
l.removeLast();
l.display();
l.removeFrom(3);
l.display();
l.insertLast(49);
l.display();
l.removeMid();
l.display();
}
void insertFirst(int val){
Node n = new Node(val);
if(head==null){
head = n;
tail = n;
}
else{
n.next = head;
head.prev = n;
head = n;
}
c++;
}

void insertLast(int val){
Node n = new Node(val);
if(head==null){
head = n;
tail = n;
}
else{
tail.next = n;
n.prev = tail;
tail = n;
}
c++;
}

void insertMid(int val){
Node n = new Node(val);
if(head==null){
head = n;
tail = n;
}
else{
mid = c/2;
Node current = head;
Node prev = current;
while(current!=null){
if(i == mid){
prev.next = n;
n.prev = prev;
n.next = current;
current.prev = n;
break;
}
i++;
prev = current;
current = current.next;
}
}
c++;
}

void insertIn(int index, int val){
i=0;
Node n = new Node(val);
if(head==null){
head = n;
tail = n;
}
else{
Node current = head;
Node prev = current;
while(current!=null){
if(i==index){
prev.next = n;
n.prev = prev;
n.next = current;
current.prev = n;
break;
}
i++;
prev = current;
current = current.next;
}
}
c++;
}

void removeFirst(){
if(head==null){
System.out.print("List is Empty!!!");
}
else{
head = head.next;
head.prev=null;
c--;
}
}
void removeLast(){
if(head==null){
System.out.print("List is Empty!!!");
}
else{
Node current = head;
while(current.next!=tail){
current = current.next;
}
current.next = null;
tail = current;
c--;
}
}
void removeFrom(int index){
i = 0;
found = true;
if(head==null){
System.out.println("list is empty!!!");
}

else{
Node current = head;
Node prev = current;
while(current!=null){
if(i==index){
current = current.next;
prev.next = current;
current.prev = prev;
found = false;
c--;
break;
}
i++;
prev = current;
current = current.next;
}
}
if(found){
System.out.println("Index Out of bound Error!");
}

}

void removeMid(){
i =0;
if(head == null){
System.out.println("List is Empty!!");
}
else{
mid = c/2;
Node current = head;
Node prev = current;
while(current!=null){
if(i==mid){
current = current.next;
prev.next = current;
current.prev = prev;
c--;
break;
}
i++;
prev = current;
current = current.next;
}
}


}
void display(){
Node current = head;
while(current!=null){
System.out.print(current.data + "-->");
current = current.next;
}
System.out.println();
}

}
